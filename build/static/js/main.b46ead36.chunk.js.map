{"version":3,"sources":["pages/kitchen.js","utils/firebase.js","components/Card/card.js","components/Menu/menu.js","pages/service.js","App.js","serviceWorker.js","index.js"],"names":["Kitchen","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Card","props","onClick","handleClick","name","price","Menu","useState","menu","setMenu","useEffect","firestore","collection","get","then","querySnapshot","forEach","doc","current","data","console","log","map","menuItem","Service","App","to","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8NAQeA,MANf,WACI,OACI,8C,uCCURC,IAASC,cAVM,CACXC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECJeS,MATf,SAAcC,GACV,OACI,6BAASC,QAASD,EAAME,aACpB,2BAAIF,EAAMG,MACV,2BAAIH,EAAMI,SCuBPC,EA1BF,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJC,EADI,KAejB,OAZAC,qBAAU,WACRnB,EAASoB,YAAYC,WAAW,QAAQC,MACrCC,MAAK,SAAUC,GACdA,EAAcC,SAAQ,SAAUC,GAE9BR,GAAQ,SAACS,GAAD,4BAAiBA,GAAjB,CAA0BD,EAAIE,oBAG3C,IAEHC,QAAQC,IAAIb,GAGV,6BAEIA,EAAKc,KAAI,SAAAC,GAAQ,OACf,kBAAC,EAAD,CAAMnB,KAAMmB,EAASnB,KAAMC,MAAOkB,EAASlB,MAAOF,YAAa,kBAAKiB,QAAQC,IAAIE,WCVzEC,MATjB,WAEI,OACE,6BACE,kBAAC,EAAD,Q,eCmCOC,MA/Bf,SAASA,IACP,OACE,kBAAC,IAAD,KACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,cAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WAAWC,UAAWtC,IAClC,kBAAC,IAAD,CAAOuC,OAAK,EAACF,KAAK,KAChB,kBAACF,EAAD,WCvBQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.b46ead36.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Kitchen () {\n    return (\n        <div> Pedido Aqui</div>\n    )\n}\n\nexport default Kitchen","import firebase from 'firebase';\nimport 'firebase/firestore';\n\n\nconst config = {\n    apiKey: \"AIzaSyC4BoOnDoPdHro1uH_Ulm4gaJtyvQoyVes\",\n    authDomain: \"burger-queen-lab03.firebaseapp.com\",\n    databaseURL: \"https://burger-queen-lab03.firebaseio.com\",\n    projectId: \"burger-queen-lab03\",\n    storageBucket: \"burger-queen-lab03.appspot.com\",\n    messagingSenderId: \"317972441220\",\n    appId: \"1:317972441220:web:c991caeb12a41e5ee27ad1\"\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;","import React from 'react'\n\n\nfunction Card(props) {\n    return (\n        <section onClick={props.handleClick} >\n            <p>{props.name}</p>\n            <p>{props.price}</p>\n        </section>\n    )\n}\n\nexport default Card","import React, { useEffect, useState } from 'react';\nimport firebase from '../../utils/firebase.js';\nimport Card from '../Card/card.js';\n\nconst Menu = () => {\n  const [menu, setMenu] = useState([]);\n\n  useEffect(() => {\n    firebase.firestore().collection('menu').get()\n      .then(function (querySnapshot) {\n        querySnapshot.forEach(function (doc) {\n          // doc.data() is never undefined for query doc snapshots\n          setMenu((current) => [...current, doc.data()]);\n        });\n      })\n  }, [])\n\n  console.log(menu)\n\n  return (\n    <div>\n      {\n        menu.map(menuItem =>\n          <Card name={menuItem.name} price={menuItem.price} handleClick={()=> console.log(menuItem)} />\n        )\n      }\n    </div>\n  );\n}\n\nexport default Menu\n","import React  from 'react';\n//import './App.css';\nimport Menu from '../components/Menu/menu.js'\n\nfunction Service() {\n  \n    return (\n      <div>\n        <Menu/>\n      </div>\n    );\n  }\n  \n  export default Service;","import React from 'react';\n//import './App.css';\nimport Kitchen from './pages/kitchen.js'\nimport Service from './pages/service.js'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/service\">Sal√£o</Link>\n            </li>\n            <li>\n              <Link to=\"/kitchen\">Cozinha</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/service\">\n            <Service />\n          </Route>\n          <Route path=\"/kitchen\" component={Kitchen} />\n          <Route exact path=\"/\">\n            <App />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}